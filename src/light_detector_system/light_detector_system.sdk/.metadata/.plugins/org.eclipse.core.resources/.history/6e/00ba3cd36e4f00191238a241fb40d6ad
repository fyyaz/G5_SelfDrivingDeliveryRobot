/*
 * range_detector.h
 *
 *  Created on: Mar 25, 2019
 *      Author: Shahrooz
 */

#ifndef SRC_RANGE_DETECTOR_H_
#define SRC_RANGE_DETECTOR_H_

/*
* This contains helper functions for obstacle detection,
* including interrupt handler routines.
*/

#include "xparameters.h"
#include "xstatus.h"
#include "xintc.h"
#include "xil_exception.h"
#include "xil_io.h"
#include "xil_cache.h"




#define INTC_DEVICE_ID					  XPAR_INTC_0_DEVICE_ID

/*
 *  This is the Interrupt Number of the Device whose Interrupt Output is
 *  connected to the Input of the Interrupt Controller
 */
#define INTC_DEVICE_UART_ID				  XPAR_INTC_0_UARTLITE_0_VEC_ID
#define INTC_DEVICE_RANGE_DETECTOR_ID	  XPAR_INTC_0_RANGE_DETECTOR_IP_0_VEC_ID

/* Instance of the Interrupt Controller */
static XIntc InterruptController;

/*
 * Create a shared variable to be used by the main thread of processing and
 * the interrupt processing
 */
volatile static int InterruptProcessed = FALSE;

enum drive_routines{WAIT, FOLLOW, SEARCH, AVOID};

int IntcExample(u16 DeviceId);
int SetUpInterruptSystem(XIntc *XIntcInstancePtr);
void UARTDeviceDriverHandler(void *CallbackRef);
void RangeDetectorDeviceDriverHandler(void *CallbackRef);




/*****************************************************************************/
/**
*
* This function initializes the Obstacle Detector IP.
*
* @param	None.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
void initObstacleDetectorIP(unsigned int clk_freq, unsigned int obstacle_distance_threshold) {
	Xil_Out32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 0, clk_freq);
	Xil_Out32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 4, obstacle_distance_threshold);
}

void monitorObstacleDetectorIP() {
	while (1) {
		u32 dist_inches_left = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 12);
		u32 obs_near_left = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 16);
		u32 dist_inches_right = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 20);
		u32 obs_near_right = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 24);
		xil_printf("Obstacle detector: LEFT dist_in=%d obs_near=%d ; RIGHT dist_in=%d obs_near=%d\r",
				dist_inches_left, obs_near_left, dist_inches_right, obs_near_right);
		usleep(200000);
	}
}


/*****************************************************************************/
/**
*
* This is the main function for the Interrupt Controller example.
*
* @param	None.
*
* @return	XST_SUCCESS to indicate success, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
int startSonarIntc(void)
{
	int Status;

	/*
	 * Run the Intc example , specify the Device ID generated in
	 * xparameters.h
	 */
	Status = IntcExample(INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}



/*****************************************************************************/
/**
*
* This function is an example of how to use the interrupt controller driver
* component (XIntc) and the hardware device.  This function is designed to
* work without any hardware devices to cause interrupts.  It may not return
* if the interrupt controller is not properly connected to the processor in
* either software or hardware.
*
* This function relies on the fact that the interrupt controller hardware
* has come out of the reset state such that it will allow interrupts to be
* simulated by the software.
*
* @param	DeviceId is Device ID of the Interrupt Controller Device,
*		typically XPAR_<INTC_instance>_DEVICE_ID value from
*		xparameters.h.
*
* @return	XST_SUCCESS to indicate success, otherwise XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
int IntcExample(u16 DeviceId)
{
	int Status;

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	Status = XIntc_Initialize(&InterruptController, DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Perform a self-test to ensure that the hardware was built
	 * correctly.
	 */
	Status = XIntc_SelfTest(&InterruptController);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Setup the Interrupt System.
	 */
	Status = SetUpInterruptSystem(&InterruptController);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;

}


/******************************************************************************/
/**
*
* This function connects the interrupt handler of the interrupt controller to
* the processor.  This function is separate to allow it to be customized for
* each application.  Each processor or RTOS may require unique processing to
* connect the interrupt handler.
*
* @param	None.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
int SetUpInterruptSystem(XIntc *XIntcInstancePtr)
{
	int Status;


	/*
	 * Connect a device driver handler that will be called when an interrupt
	 * for the device occurs, the device driver handler performs the
	 * specific interrupt processing for the device.
	 */
	Status = XIntc_Connect(XIntcInstancePtr, INTC_DEVICE_UART_ID,
				   (XInterruptHandler)UARTDeviceDriverHandler,
				   (void *)0);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XIntc_Connect(XIntcInstancePtr, INTC_DEVICE_RANGE_DETECTOR_ID,
					   (XInterruptHandler)RangeDetectorDeviceDriverHandler,
					   (void *)0);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Start the interrupt controller such that interrupts are enabled for
	 * all devices that cause interrupts, specify real mode so that
	 * an interrupt can be caused by real hardware rather than software
	 * interrupt.
	 */
	Status = XIntc_Start(XIntcInstancePtr, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Enable the interrupt for the device and then cause an
	 * interrupt so the handlers will be called.
	 */
	XIntc_Enable(XIntcInstancePtr, INTC_DEVICE_UART_ID);
	XIntc_Enable(XIntcInstancePtr, INTC_DEVICE_RANGE_DETECTOR_ID);

	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				(Xil_ExceptionHandler)XIntc_InterruptHandler,
				XIntcInstancePtr);

	/*
	 * Enable exceptions.
	 */
	Xil_ExceptionEnable();

	return XST_SUCCESS;

}


/******************************************************************************/
/**
*
* This function is designed to look like an interrupt handler in a device
* driver. This is typically a 2nd level handler that is called from the
* interrupt controller interrupt handler.  This handler would typically
* perform device specific processing such as reading and writing the registers
* of the device to clear the interrupt condition and pass any data to an
* application using the device driver.  Many drivers already provide this
* handler and the user is not required to create it.
*
* @param	CallbackRef is passed back to the device driver's interrupt
*		handler by the XIntc driver.  It was given to the XIntc driver
*		in the XIntc_Connect() function call.  It is typically a pointer
*		to the device driver instance variable if using the Xilinx
*		Level 1 device drivers.  In this example, we do not care about
*		the callback reference, so we passed it a 0 when connecting the
*		handler to the XIntc driver and we make no use of it here.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
void UARTDeviceDriverHandler(void *CallbackRef)
{
	/*
	 * Indicate the interrupt has been processed using a shared variable.
	 */
	InterruptProcessed = TRUE;
	xil_printf("Got UART interrupt\r\n");

}

void RangeDetectorDeviceDriverHandler(void *CallbackRef)
{
	/*
	 * Indicate the interrupt has been processed using a shared variable.
	 */
	InterruptProcessed = TRUE;
	u32 obs_nearing_leaving = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 8);

	xil_printf("Got SONAR interrupt: ");
	if (obs_nearing_leaving) {
		xil_printf("Obstacle in vicinity\r\n");
	} else {
		xil_printf("Obstacle left vicinity\r\n");
	}

	//Update drive state
	change_drive_state(AVOID);

}




// Helper functions

int TearDownInterruptSystem(void) {
	XIntc_Disable(&InterruptController, INTC_DEVICE_UART_ID);
	XIntc_Disable(&InterruptController, INTC_DEVICE_RANGE_DETECTOR_ID);
}

void EnableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheEnable();
#endif
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheEnable();
#endif
#endif
}

void DisableCaches() {
#ifdef __MICROBLAZE__
#ifdef XPAR_MICROBLAZE_USE_DCACHE
   Xil_DCacheDisable();
#endif
#ifdef XPAR_MICROBLAZE_USE_ICACHE
   Xil_ICacheDisable();
#endif
#endif
}

#endif /* SRC_RANGE_DETECTOR_H_ */
