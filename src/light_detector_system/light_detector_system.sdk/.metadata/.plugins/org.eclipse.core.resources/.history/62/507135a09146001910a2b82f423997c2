/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xil_types.h"
#include "xil_io.h"
#include "sleep.h"
#include "xstatus.h"

//For stream interface macros
#include "fsl.h"

//Custom Motor Controller API
//#include "motor_controller.h"

//Stream ID for LED
#define LED_POS_FSL_ID 0

#define CAMERA_RES_X 2560

#define MIN_MOTOR_SPEED 25
#define MAX_MOTOR_SPEED 100



volatile unsigned int * light_detect = (volatile unsigned int *)0x44a00000;

double get_led_pos(){

	//Read from AXI Stream
	//See FSL section in https://www.xilinx.com/support/documentation/sw_manuals/edk10_oslib_rm.pdf
	//Not 100% about it
	int pos;
	getfslx(pos, LED_POS_FSL_ID, FSL_NONBLOCKING);

	//Check if data was valid (not empty/null)
	int is_invalid = 1;
	fsl_isinvalid(is_invalid);

	if (is_invalid)
		return -2.0;

	int is_error = 1;
	fsl_isinvalid(is_error);

	if (is_error)
		return -3.0;

	//Assuming x pos is in 10 LSB

	//double x_loc = (double)x_pos/CAMERA_RES_X - 1.0;

	//return x_loc;
	return pos;
}

int main()
{
    init_platform();

    initObstacleDetectorIP();

   // Setup interrupts
   int Status = startSonarIntc();
   if (Status == XST_SUCCESS) xil_printf("Interrupt setup succeeded\r\n");
   else xil_printf("Interrupt setup failed\r\n");


   //while(1){}

   xil_printf("hello\n");
   int left_pmod = 0; int right_pmod = 1;
   //monitorSonarPmod(left_pmod); // Monitor the MAXSONAR PMOD directly
   //monitorObstacleDetectorIP(); // Monitor the Obstacle detector IP

    *(light_detect + 1) = 0;//set color
    *(light_detect + 2) = 0x01f07c1f;//set threshold

    int i =0;
    print("hello\n\r");
    while(1)
    {
		int frames = 1000;
		int pos = 0;
		do{
			pos = get_led_pos();
		}while(pos < 0);
		i++;
				if (i % frames != 0)
					continue;
		xil_printf("pos: %x\n", pos);
		int x = pos & 0x0fff;
		int y = (pos >> 12) & 0x0ff;

		xil_printf("x, y: %d %d\n", x, y);
    }
    cleanup_platform();
    return 0;
}


void monitorObstacleDetectorIP() {
	while (1) {
		u32 dist_inches_left = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 12);
		u32 obs_near_left = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 16);
		u32 dist_inches_right = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 20);
		u32 obs_near_right = (u32) Xil_In32(XPAR_RANGE_DETECTOR_IP_0_S00_AXI_BASEADDR + 24);
		xil_printf("Obstacle detector: LEFT dist_in=%d obs_near=%d ; RIGHT dist_in=%d obs_near=%d\r",
				dist_inches_left, obs_near_left, dist_inches_right, obs_near_right);
		usleep(200000);
	}
}
